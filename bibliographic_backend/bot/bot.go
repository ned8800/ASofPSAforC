package bot

import (
	"bibliographic_litriture_gigachat/gigachat"
	"bibliographic_litriture_gigachat/search"
	"errors"
	"fmt"
	"log"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	updateTimeout = 60
	messagePrefix = "üìö"
)

var (
	ErrTokenIsEmpty   = errors.New("TELEGRAM_TOKEN environment variable is empty")
	ErrInvalidCommand = errors.New("invalid command")
)

type TelegramBot struct {
	bot             *tgbotapi.BotAPI
	gigachatService *gigachat.Service
}

func New(gigachatService *gigachat.Service) (*TelegramBot, error) {
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		return nil, ErrTokenIsEmpty
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("tgbotapi.NewBotAPI: %w", err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	return &TelegramBot{
		bot:             bot,
		gigachatService: gigachatService,
	}, nil
}

func (b *TelegramBot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = updateTimeout

	updates := b.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go b.processMessage(update.Message)
		}
	}

	return nil
}

func (b *TelegramBot) processMessage(msg *tgbotapi.Message) {
	log.Printf("[%s] %s", msg.From.UserName, msg.Text)

	response, err := b.handleMessage(msg)
	if err != nil {
		log.Printf("Error handling message: %v", err)
		response = b.formatError(err)
	}

	if err := b.sendResponse(msg.Chat.ID, msg.MessageID, response); err != nil {
		log.Printf("Error sending response: %v", err)
	}
}

func (b *TelegramBot) handleMessage(msg *tgbotapi.Message) (string, error) {
	switch {
	case msg.IsCommand():
		return b.handleCommand(msg)
	default:
		return b.handleTextMessage(msg)
	}
}

func (b *TelegramBot) handleCommand(msg *tgbotapi.Message) (string, error) {
	switch msg.Command() {
	case "start":
		return b.handleStartCommand(), nil
	case "help":
		return b.handleHelpCommand(), nil
	case "search":
		return b.handleSearchCommand(msg.CommandArguments())
	case "generate_ref":
		return b.handleGenerateRefCommand(msg.CommandArguments())
	default:
		return "", ErrInvalidCommand
	}
}

func (b *TelegramBot) handleStartCommand() string {
	return fmt.Sprintf(`%s –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
/generate_ref <–∑–∞–ø—Ä–æ—Å> <—Ç–∏–ø> <–ø—Ä–∏–º–µ—Ä> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
/help - –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã!`, messagePrefix)
}

func (b *TelegramBot) handleHelpCommand() string {
	return fmt.Sprintf(`%s –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/search <–∑–∞–ø—Ä–æ—Å>
–ü–æ–∏—Å–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
–ü—Ä–∏–º–µ—Ä: /search –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç

/generate_ref "<–∑–∞–ø—Ä–æ—Å>" "<—Ç–∏–ø>" "<–ø—Ä–∏–º–µ—Ä>"
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
–ü—Ä–∏–º–µ—Ä: /generate_ref "–ò–≤–∞–Ω–æ–≤ –ê.–ò. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ. –ú.: –ù–∞—É–∫–∞, 2020." "–∫–Ω–∏–≥–∞" "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–Ω–æ–≥–æ—Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–æ—Ä–∏–∏ –ú–∞—Ä–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ / –¢. –ù. –ú–æ–∏—Å–µ–µ–≤, –û. –Ø. –ö—Ä–∞–≤–µ—Ü // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. ‚Äì 2005."

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞!`, messagePrefix)
}

func (b *TelegramBot) handleSearchCommand(query string) (string, error) {
	if strings.TrimSpace(query) == "" {
		return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞\n–ü—Ä–∏–º–µ—Ä: /search –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", nil
	}

	references, err := search.Search(query)
	if err != nil {
		return "", fmt.Errorf("search.Search: %w", err)
	}

	return b.formatSearchResults(references), nil
}

func (b *TelegramBot) handleGenerateRefCommand(args string) (string, error) {
	parts := strings.Split(args, "\"")
	var cleanParts []string
	for _, part := range parts {
		if trimmed := strings.TrimSpace(part); trimmed != "" {
			cleanParts = append(cleanParts, trimmed)
		}
	}

	if len(cleanParts) < 3 {
		return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /generate_ref \"<–∑–∞–ø—Ä–æ—Å>\" \"<—Ç–∏–ø>\" \"<–ø—Ä–∏–º–µ—Ä>\"", nil
	}

	req := gigachat.FormRequest{
		UserRequest:   cleanParts[0],
		PromptType:    cleanParts[1],
		ExampleRecord: cleanParts[2],
	}

	resp, err := b.gigachatService.SendRequest(req)
	if err != nil {
		return "", fmt.Errorf("gigachatService.SendRequest: %w", err)
	}

	return b.formatGigaChatResponse(resp.Answer), nil
}

func (b *TelegramBot) handleTextMessage(msg *tgbotapi.Message) (string, error) {
	text := strings.TrimSpace(msg.Text)
	if text == "" {
		return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", nil
	}

	references, err := search.Search(text)
	if err != nil {
		return "", fmt.Errorf("search.Search: %w", err)
	}

	return b.formatSearchResults(references), nil
}

func (b *TelegramBot) formatSearchResults(data map[string]string) string {
	if len(data) == 0 {
		return "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
	}

	var result strings.Builder
	result.WriteString(fmt.Sprintf("%s –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n", messagePrefix))

	for key, value := range data {
		result.WriteString(fmt.Sprintf("üìñ *%s*\n%s\n\n", key, value))
	}

	return result.String()
}

func (b *TelegramBot) formatGigaChatResponse(response string) string {
	return fmt.Sprintf("%s –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:\n\n%s", messagePrefix, response)
}

func (b *TelegramBot) formatError(err error) string {
	switch {
	case errors.Is(err, ErrInvalidCommand):
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
	default:
		return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
	}
}

func (b *TelegramBot) sendResponse(chatID int64, replyToID int, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyToMessageID = replyToID

	_, err := b.bot.Send(msg)
	return err
}
